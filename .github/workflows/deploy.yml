name: Deploy to EC2

on:
  push:
    branches:
      - main # Or your default branch, e.g., master

jobs:
  deploy:
    name: Deploy to EC2 instance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3 # Pinned to a specific version
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22 # Default SSH port
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "Connecting to EC2 instance..."
            
            # Define project directory on EC2
            PROJECT_DIR="/home/${{ secrets.EC2_USERNAME }}/gcp_project"
            DATA_INFRA_DIR="${PROJECT_DIR}/services/data_infrastructure"

            echo "Ensuring project directory exists: ${PROJECT_DIR}"
            mkdir -p ${PROJECT_DIR}
            cd ${PROJECT_DIR}
            
            echo "Cloning or pulling latest code..."
            # If the repo is already cloned, pull changes. Otherwise, clone it.
            if [ -d ".git" ]; then
              echo "Pulling latest changes from main branch..."
              git checkout main # Ensure correct branch
              git pull origin main
            else
              echo "Cloning repository https://github.com/${{ github.repository }}.git ..."
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            echo "Navigating to data infrastructure directory: ${DATA_INFRA_DIR}"
            cd ${DATA_INFRA_DIR}

            echo "Checking for docker-compose.yml..."
            if [ ! -f "docker-compose.yml" ]; then
              echo "Error: docker-compose.yml not found in ${DATA_INFRA_DIR}"
              exit 1
            fi

            echo "Writing .env file from secret..."
            echo "${{ secrets.DOTENV_CONTENT }}" > .env
            echo ".env file created/updated."
            
            echo "Pulling latest Docker images specified in docker-compose.yml..."
            docker-compose pull
            
            echo "Stopping and removing existing services (if any)..."
            docker-compose down --remove-orphans
            
            echo "Starting services with Docker Compose (building if necessary)..."
            docker-compose up -d --build 
            
            echo "Deployment to EC2 complete!"
            
            echo "Cleaning up unused Docker images and volumes..."
            # Optional: Prune unused Docker images and volumes to save space
            # Use with caution if other projects share Docker on this EC2 instance.
            docker image prune -af
            docker volume prune -f
            
            echo "Current Docker container status:"
            docker ps -a
