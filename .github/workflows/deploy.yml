name: Deploy to EC2

on:
  push:
    branches:
      - main # Or your default branch, e.g., master

jobs:
  deploy:
    name: Deploy to EC2 instance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22 # Default SSH port
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "Connecting to EC2 instance..."
            
            # Define project directory on EC2
            # This should match where your user_data.sh might clone the repo, or where you intend to keep it.
            PROJECT_DIR="/home/${{ secrets.EC2_USERNAME }}/gcp_project"
            DATA_INFRA_DIR="${PROJECT_DIR}/services/data_infrastructure"

            echo "Navigating to project directory: ${PROJECT_DIR}"
            # Create project directory if it doesn't exist (e.g., first deployment)
            mkdir -p ${PROJECT_DIR}
            cd ${PROJECT_DIR}
            
            # Pull latest code from the repository
            # If the repo is already cloned, pull changes. Otherwise, clone it.
            if [ -d ".git" ]; then
              echo "Pulling latest changes..."
              git checkout main # Or your default branch
              git pull origin main # Or your default branch
            else
              echo "Cloning repository..."
              # You might need to configure git for the first time or use a deploy key if your repo is private
              # For public repos, this should be fine. For private, consider using a deploy key or HTTPS with a token.
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            echo "Navigating to data infrastructure directory: ${DATA_INFRA_DIR}"
            cd ${DATA_INFRA_DIR}

            echo "Writing .env file..."
            echo "${{ secrets.DOTENV_CONTENT }}" > .env
            echo ".env file created/updated."
            
            echo "Pulling latest Docker images (if any pre-built)..."
            # If your Docker images are hosted on a registry and specified in docker-compose.yml,
            # this will pull the latest versions.
            # If you build images directly on EC2, this step might not be strictly necessary
            # unless base images in your Dockerfiles need updating.
            docker-compose pull
            
            echo "Stopping current services (if any)..."
            # Use 'docker-compose down' to stop and remove containers, networks, and volumes defined in compose file
            # Or 'docker-compose stop' to just stop them without removing.
            # 'down' is cleaner for redeployments.
            docker-compose down --remove-orphans
            
            echo "Starting services with Docker Compose..."
            # Use '--build' if your Dockerfiles are part of the repo and you build images on the EC2 instance.
            # If images are pre-built and pulled from a registry, '--build' is not needed.
            # Assuming you might have Dockerfiles in your repo that need building:
            docker-compose up -d --build 
            
            echo "Deployment complete!"
            
            echo "Cleaning up old Docker images and volumes..."
            # Optional: Prune unused Docker images and volumes to save space
            docker image prune -af
            docker volume prune -f
            
            echo "Current Docker status:"
            docker ps -a
