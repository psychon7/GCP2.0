Product Requirements Document (PRD)

## **1. Executive Summary**

Build a vertically-integrated, 100-camera global network that extracts entropy from live CCTV feeds, validates randomness, computes multi-metric “coherence” analytics, correlates anomalies with geo-located news/sports/events and renders everything on a real-time 3-D globe. Single-VPS baseline must hit <100 ms end-to-end latency and cost <€120 / month, while retaining a clear path to horizontal scale (K3s).

---

## **2. Goals & Success Metrics**

| **ID** | **Goal** | **KPI / Target** |
| --- | --- | --- |
| G-1 | Generate cryptographically-secure TRNG stream | ≥ 256 b / node / sec, NIST SP-800-22 pass-rate ≥ 99 % |
| G-2 | Real-time coherence analytics | CEC, PNS, FCI, MFR refresh ≤ 5 s |
| G-3 | Dashboard UX | Globe FPS ≥ 55 on M1/M3 laptop at 1080 p |
| G-4 | Correlate spikes with events | Relevant news/event returned ≤ 30 s after spike |
| G-5 | Research experiments | One-click experiment with rolling p-value & auto-stop |

---

## **3. Scope**

### **In-Scope**

1. **Camera Management Module** for discovery, validation, and health monitoring of public camera streams.
2. **Edge Entropy Extraction** from RTSP/HTTP cameras.
3. **Quality-Assurance Pipeline** (sub-second NIST subset, ApEn, χ², auto-corr).
4. **GPU-accelerated Coherence Metrics** (CEC, PNS, FCI, MFR, RCC).
5. **Event Correlation Service** pulling **NewsAPI**, **API-Sports**, **PredictHQ**, enriched via local Llama-3.
6. **FastAPI / GraphQL Gateway** with JWT auth.
7. **Next.js + Three.js/WebGPU** dashboard & experiment console.
8. **CI/CD, monitoring, IaC** for single-VPS deployment.

### **Out-of-Scope (v1)**

*Mobile app, SMS notifications, >1000 nodes*, advanced AI prediction models.

---

## **4. Personas & Use Cases**

| **Persona** | **Primary Tasks** |
| --- | --- |
| Researcher | Launch global meditation experiment; export CSV for publication |
| Casual Visitor | Watch globe heat-map, drill down to city-level metrics |
| Ops Engineer | Monitor node health, add / revoke cameras |
| Data Scientist | Query raw entropy, run custom stats notebooks |

---

## **5. Functional Requirements**

| **Req-ID** | **Description** | **Acceptance Criteria** |
| --- | --- | --- |
| FR-1 | Camera Management discovers, validates, and maintains healthy camera pool | Maintain ≥ 100 active cameras with ≥ 80% availability and geographic diversity |
| FR-2 | Edge agent pulls frames (1–30 FPS), outputs SHA-3 512-bit samples | Hash digest arrives via NATS topic entropy.raw.<id> ≤ 100 ms after frame |
| FR-3 | QA service scores each sample (0-100) | Node flagged when rolling score < 70 for 10 s |
| FR-4 | Analyzer computes metrics every 5 s sliding window | Metrics row written to TimescaleDB and UI receives WS delta |
| FR-5 | Spike detector (Z > 3) emits event to Event-Corr | Correlation service returns ≥ 1 headline or sports event with geo match confidence ≥ 0.7 |
| FR-6 | Experiment manager schedules, tracks Wald SPRT | Auto-stop & persist summary when p < 0.01 or timeout |
| FR-7 | Dashboard globe shows node spheres size ∝ quality, color ∝ coherence | Refresh ≤ 5 s; FPS ≥ 55 |

---

## **6. Non-Functional Requirements**

| **Category** | **Target** |
| --- | --- |
| **Perf.** | <100 ms camera➔metric; end-to-end CPU <70 % on 8vCPU; Camera Management benchmarking <30s per camera |
| **Reliability** | VPS uptime ≥ 99.9 %; automatic node failover; camera pool health check every 30s |
| **Security** | mTLS edge→ingest, JWT auth, LUKS disk crypto; camera access via throttled API only |
| **Scalability** | Linear scale to 300 nodes by adding worker pods; discovery workers scale horizontally |
| **Cost** | OPEX ≤ €120/mo single VPS |
| **Compliance** | GDPR: only hashes + coarse geo stored; no raw camera frames persisted |

---

## **7. System Architecture Overview**

Mermaid:

```
flowchart TD
    subgraph Sources
        PUB[Public Cameras] --> CAM_MGR[Camera Management]
    end
    
    subgraph Edge
        CAM_MGR --> AGENT(Rust Entropy Agent)
    end
    
    CAM_MGR -- "Health/Metrics" --> PGDB[(PostgreSQL)]
    AGENT -- Protobuf:NATS --> INGEST[Ingest-GW]
    INGEST --> CORE[Entropy-Core]
    CORE --> QA[QA Engine]
    QA -- good --> ANALYZER[GPU Coherence Analyzer]
    QA -- Timescale --> TSDB[(TimescaleDB)]
    ANALYZER --> TSDB
    ANALYZER -- WS ⇔ --> API[FastAPI/GraphQL]
    API --> UI[Next.js Globe]
    ANALYZER -- spike --> CORR[Event Correlator]
    CORR -- events --> TSDB
    API --> UI
    EXPERIMENT[Experiment Manager] -. query .-> TSDB
    UI -- mutate --> API
```

(High-level only; detailed component call graph delivered earlier.)

---

## **8. Technology Stack (locked)**

| **Layer** | **Tech** |
| --- | --- |
| Camera Management | Python 3.12, FastAPI, SQLAlchemy 2.0, OpenCV, aiohttp |
| Edge | Rust 1.78, tokio, opencv-rust, sha3, prost |
| Messaging | NATS JetStream 3.x |
| Core Libs | Rust + PyO3 bindings |
| GPU | CUDA 12, CuPy 13, Numba 0.60 |
| API | FastAPI 0.111 + Ariadne GraphQL |
| Auth | Keycloak 24 / JWT |
| DB | TimescaleDB 2.15 (PostgreSQL 16 ext), PostgreSQL 16 |
| Cache | Redis 7 |
| Front-end | Next.js 15, React 19, Three.js 0.163, WebGPU |
| DevOps | Docker, Helm, k3s, GitHub Actions, Prometheus + Grafana |

---

## **9. Detailed Component Specs**

### **9.1 Camera Management (**

### **services/camera_management**

### **)**

*Language*: Python 3.12

*Entry*: main.py

*Key modules*

| **Module** | **Purpose** |
| --- | --- |
| DiscoveryWorker | Async camera source scrapers for DOT, EarthCam, Insecam, Shodan |
| BenchWorker | Validates and benchmarks camera streams (FPS, resolution, latency) |
| EntropyQualityTest | NIST frequency test for entropy quality assessment |
| HealthMonitor | Periodic health checks and status transitions for cameras |
| APIServer | FastAPI server exposing camera endpoints for entropy_agent |

*Data Model*

```
CREATE TABLE cameras(
  id SERIAL PRIMARY KEY,
  url TEXT NOT NULL UNIQUE,
  source TEXT NOT NULL,
  discovered_at TIMESTAMPTZ NOT NULL,
  last_checked_at TIMESTAMPTZ NOT NULL,
  status VARCHAR(20) NOT NULL,
  fps FLOAT,
  resolution_width INT,
  resolution_height INT,
  latency_ms INT,
  entropy_quality FLOAT,
  metadata JSONB,
  geo_lat FLOAT,
  geo_lon FLOAT,
  geo_city TEXT,
  geo_country TEXT
);
```

*Config (camera_mgmt.toml)*

```
min_pool_size = 100
fps_threshold = 1.0
max_latency_ms = 2000
entropy_quality_threshold = 0.7
api_port = 8000
db_connection = "postgresql://user:pass@localhost:5432/cameras"
```

API Endpoints:

| **Method** | **Path** | **Purpose** |
| --- | --- | --- |
| GET | /api/v1/active_cameras | Returns list of healthy camera URLs |
| GET | /api/v1/cameras/stats | Returns discovery and health statistics |
| GET | /metrics | Prometheus metric scrape |

### **9.2 Entropy Agent (**

### **services/entropy_agent**

### **)**

*Language*: Rust

*Entry* : main.rs

*Key structs*

| **Struct** | **Purpose** |
| --- | --- |
| FrameGrabber | Async RTSP pull, yields Mat |
| EntropyCalc | Implements Atmospheric, Photon, Thermal, Chaos formulas (SIMD) |
| VonNeumann | Debias, returns Vec<u8> |
| Publisher | Wraps NATS, sends EntropySample protobuf |

*Config (agent.toml)*

```
node_id       = 42
rtsp_url      = "rtsp://username:pwd@host/stream"
fps_min       = 1
fps_max       = 30
tls_cert_path = "certs/node.pem"
```

Unit tests: cargo test -- --nocapture.

### **9.2 Ingest Gateway (**

### **services/ingest_gw**

### **)**

*Axum* async web-socket & NATS producer.

Routes:

| **Method** | **Path** | **Purpose** |
| --- | --- | --- |
| WS | /v1/entropy | Mutual-TLS stream from agents |
| GET | /healthz | Prometheus metric scrape |

### **9.3 Entropy-Core (**

### **services/entropy_core**

### **)**

Rust lib crate → compiled as libentropy_core.so, imported by Python harness for batch.

Public FFI:

```
#[no_mangle] pub extern "C" fn merge_entropy(buf_ptr:*const u8, len:usize,
                                             out_ptr:*mut u8) -> usize;
```

Produces 512-bit digest per input vector.

### **9.4 QA Engine (**

### **services/qa_engine**

### **)**

Rust; consumes entropy.merged subject, scores, writes node_quality hypertable:

```
CREATE TABLE node_quality(
  ts TIMESTAMPTZ,
  node_id BIGINT,
  quality FLOAT
);
```

Publishes entropy.good for values ≥ 70.

### **9.5 Coherence Analyzer (**

### **services/coherence_analyzer**

### **)**

Python, entry main.py.

Loop every 5 s:

```
buf = fetch_timescale("SELECT * FROM entropy_good WHERE ts>now()-'5s'")
metrics = gpu.compute_all(buf)  # cupy kernels
write_timescale(metrics_df, "coherence_metrics")
pub_ws(metrics_delta_json)
```

CUDA kernels in libs/cuda_kernels/.

### **9.6 Event Correlator (**

### **services/event_correlator**

### **)**

Subscribes spike.detected → queries News/Sports APIs (keys via Vault).

LLM annotator:

```
from ctransformers import AutoModelForCausalLM
model = AutoModelForCausalLM.from_pretrained("TheBloke/Llama-3-8B-Instruct")
```

Caches response in Redis (TTL 1 h).

### **9.7 Experiment Manager (**

### **services/experiment_mgr**

### **)**

Celery worker (Redis broker). Task run_experiment(id):

1. Poll metric.
2. Compute Wald SPRT p-value.
3. Update experiments table.
4. When finished, publish experiment.done.<id>.

### **9.8 API Gateway (**

### **api/gateway**

### **)**

| **Type** | **Route** | **Payload** | **Notes** |
| --- | --- | --- | --- |
| GraphQL | /graphql | subscription metricsDelta | auth header Bearer |
| REST POST | /experiments | JSON | create experiment |
| REST GET | /events?lat&lon&dt | JSON | news/sports list |

OpenAPI auto-gen in CI.

### **9.9 Front-end (**

### **frontend/dashboard**

### **)**

Next.js /app/globe/page.tsx renders <Globe /> using three-globe.

State from useGraphQLSubscription.

CSS via Tailwind (already configured).

---

## **10. External API Keys (store in Vault)**

| **Provider** | **Env Var** | **Notes** |
| --- | --- | --- |
| NewsAPI v3 | NEWS_API_KEY | 1 000 req / day |
| API-Sports | SPORTS_API_KEY | football, basketball |
| PredictHQ | PREDICTHQ_TOKEN | city events |
| OpenWeather (optional) | WX_KEY | future weather correlation |

---

## **11. Dev & Deployment Workflow**

1. **Clone** → ./scripts/dev-bootstrap.sh (installs Rust, Python, Node).
2. **Local stack**: docker compose up (Timescale, NATS, Redis, Keycloak, UI).
3. **Unit tests**:
    - Rust: cargo test
    - Python: pytest -q
    - UI: pnpm test
4. **Lint/format**: pre-commit run --all-files.
5. **Build images**: act -j build.
6. **Push to registry** via GitHub Action on main.
7. **Deploy**: Watchtower auto-pulls latest tag on VPS.
8. **Helm** charts in deploy/helm/ for k3s; helm upgrade --install gcp ./deploy/helm.

---

## **12. Testing Strategy**

| **Level** | **Tool** | **Coverage Target** |
| --- | --- | --- |
| Unit | Rust cargo + Python pytest | ≥ 85 % lines |
| Integration | docker compose -f test.yml | ingest⇄QA⇄analyzer happy-path |
| E2E | Playwright | UI metrics appear in <6 s |
| Performance | Locust (WS) | sustain 200 clients, <500 ms p95 |
| Security | Trivy scan images, Snyk dependency audit |  |

---

## **13. Monitoring & Alerting**

*Prometheus* exporters: NATS, Timescale, Rust apps (opentelemetry-prom).

Alerts (Grafana OnCall):

| **Alert** | **Threshold** |
| --- | --- |
| CPU > 90 % 1 min | critical |
| End-to-end latency > 150 ms | warn |
| Node flagged count > 5 | info |
| Disk free < 20 GB | critical |

---

## **14. Risk Management**

| **Risk** | **Likelihood** | **Impact** | **Mitigation** |
| --- | --- | --- | --- |
| Camera feed disruption | High | Medium | Fallback to hardware RNG entropy mix |
| Camera source blocking | High | Medium | IP rotation, request throttling, multiple source diversification |
| Camera pool degradation | Medium | High | Continuous discovery, benchmarking, and health monitoring |
| Camera geolocation accuracy | Medium | Low | Multi-source IP geolocation verification |
| Region blackout (power/internet) | Medium | Medium | Geographic redundancy, NATS buffer |
| Fake/poisoned node | Low | High | mTLS + node enrollment protocol, anomaly detection |
| API provider rate-limits | Medium | Medium | Redis cache, exponential back-off |
| GPU memory leak | Low | High | CuPy pooled allocator, nightly restart job |
| Single-VPS failure | Medium | High | Daily pg_dump to B2, documented restore runbook |
| Camera authentication failure | Medium | Medium | Implement camera authentication retry mechanism |

---

## **15. Open Questions**

1. Should we support hardware RNG backup (TPM, VirtIO) when entropy quality drops?
2. Do we store raw frames for future audit (GDPR)?
3. Exact set of cultural indices for MFR weights – source dataset?
4. What is the minimum geographic diversity for camera pool (countries/continents)?
5. Should we implement rate-limiting or IP rotation for camera discovery to avoid being blocked?
6. Do we need custom authentication for non-public camera sources?
7. How do we handle camera connection failures and disconnections?

---

## **16. Appendix – Directory Skeleton (ready for**

## **Cline**

## **)**

```
gcp-trng/
├── cmd/                        
│   ├── ingest-gw/              
│   ├── entropy-agent/          
│   └── coherence-cli/          
├── services/                   
│   ├── camera_manager/         # Python FastAPI + bench/health workers
│   │   ├── __init__.py
│   │   ├── main.py
│   │   ├── config.py
│   │   ├── models.py
│   │   ├── db.py
│   │   ├── discovery/          
│   │   │   ├── __init__.py
│   │   │   ├── dot_scraper.py
│   │   │   ├── earthcam_crawler.py
│   │   │   ├── insecam_scanner.py
│   │   │   └── shodan_poller.py
│   │   ├── validation/         
│   │   │   ├── __init__.py
│   │   │   └── bench_worker.py
│   │   ├── health/             
│   │   │   ├── __init__.py
│   │   │   └── health_checker.py
│   │   ├── api/                
│   │   │   ├── __init__.py
│   │   │   └── routes.py
│   │   └── requirements.txt
│   ├── entropy_agent/           # Rust
│   ├── ingest_gw/               # Rust
│   ├── entropy_core/            # Rust lib + Py bindings
│   ├── qa_engine/               # Rust
│   ├── coherence_analyzer/      # Python CPU/GPU analytics
│   │   ├── __init__.py
│   │   ├── main.py
│   │   ├── gpcm.py
│   │   ├── rwmc.py
│   │   ├── dfa.py
│   │   ├── sampen.py
│   │   ├── swzc.py
│   │   ├── igbc.py
│   │   └── utils.py
│   ├── experiment_mgr/          # Python Celery
│   └── event_correlator/        # Python + LLM
├── libs/                       
│   ├── proto/                   # .proto definitions
│   ├── cuda_kernels/            # .cu files for GPU ops
│   └── common/                  # shared utils (logging, cfg)
├── api/                        
│   └── gateway/                 # FastAPI + GraphQL
├── frontend/                   
│   ├── dashboard/               # Next.js src/
│   └── experiments/             # React admin panel
├── deploy/                     
│   ├── docker/                  
│   ├── helm/                    
│   └── k8s/                     
├── infra/                      
│   ├── terraform/               
│   └── ansible/                 
├── scripts/                    
├── docs/                       
│   ├── architecture.md
│   ├── api.md
│   └── dev-setup.md
└── tests/                      
    ├── integration/
    └── gpu_bench/
```

---

### **✅ Hand-off Checklist for**

### **Cline**

- Clone repo & generate initial Cargo/Poetry/PNPM workspaces.
- Scaffold protobuf messages under libs/proto.
- Implement Entropy Agent skeleton & unit tests.
- Stand-up local NATS + Timescale via compose.
- Flesh out each service module following *Component Specs* §9.
- Pass unit & integration test suite.
- Produce Docker images tagged 0.1.0.
- Deploy to staging VPS (vps-01).
- Confirm KPIs G-1…G-4 hit.

*This PRD plus implementation notes constitute the complete contract for first delivery.*